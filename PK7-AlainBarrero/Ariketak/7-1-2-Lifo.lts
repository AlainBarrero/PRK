/*
Izenburua: LIFO
Deskribapena:
				1. LIFO pilaren arazoa, prozesu guztiak noizbait pilatik aterako direla ziurtatuz.
Egilea: Alain Barrero
Data: 2016/11/17
*/


const PK = 5		//PK  --> prozesu kopurua
range PR = 1..PK	//PR  --> prozesuen rangoa
	
const FK = 4		//FK  --> lifoaren posizio kopurua
range FR = 0..FK-1	//FR  --> lifoaren rangoa

range FRL = 0..FK	//FRL --> lifoan dauden prozesuen kopurua

range LA = 0..15 	//LA  --> lifotik atera prozesu guztiak

PROZESUA = (sartu.return[i:FR] -> atera[i] -> PROZESUA).

//s --> lifoan sartu eta ateratzeko apuntadorea
//k --> lifoan sartu diren prozesuen kontagailua
//b --> lifoan dauden prozesu guztiak aterako direla bermatzen duen aldagaia
FIFO = FIFO[0][0][0],
FIFO[s:FRL][k:LA][b:FR] = 	( when(s<FK && b==0)		sartu.return[s] -> 		if(k<10)then			FIFO[s+1][k+1][0]
																				else					FIFO[s+1][0][1]
							| when(s>0)					atera[s-1]		-> 		if(b==1 && s!=1)then	FIFO[s-1][0][1]
																				else					FIFO[s-1][k][0]
).

||LIFO_ILARA = (p[PR]:PROZESUA || p[PR]::FIFO)<<{{p[PR]}.sartu.return}.


/*
HAUSNARKETA

Bizitasun propietatea ez bortxatzeko momentu batean denak aterako direla zihurtatu behar dugu, horretarako 
kontagailu bat erabiliko da, prozesu kopuru bat sartu denean prozesu guztiak ateratzeko.
*/

